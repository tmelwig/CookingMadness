/**
 * Generated by orval v7.6.0 🍺
 * Do not edit manually.
 * Gourmet API
 * 
This is the autogenerated OpenAPI documentation for your [Fuego](https://github.com/go-fuego/fuego) API.

Below is a Fuego Cheatsheet to help you get started. Don't hesitate to check the [Fuego documentation](https://go-fuego.dev) for more details.

Happy coding! 🔥

## Usage

### Route registration

```go
func main() {
	// Create a new server
	s := fuego.NewServer()

	// Register some routes
	fuego.Post(s, "/hello", myController)
	fuego.Get(s, "/myPath", otherController)
	fuego.Put(s, "/hello", thirdController)

	adminRoutes := fuego.Group(s, "/admin")
	fuego.Use(adminRoutes, myMiddleware) // This middleware (for authentication, etc...) will be available for routes starting by /admin/*, 
	fuego.Get(adminRoutes, "/hello", groupController) // This route will be available at /admin/hello

	// Start the server
	s.Start()
}
```

### Basic controller

```go
type MyBody struct {
	Name string `json:"name" validate:"required,max=30"`
}

type MyResponse struct {
	Answer string `json:"answer"`
}

func hello(ctx fuego.ContextWithBody[MyBody]) (*MyResponse, error) {
	body, err := ctx.Body()
	if err != nil {
		return nil, err
	}

	return &MyResponse{Answer: "Hello " + body.Name}, nil
}
```

### Add openAPI information to the route

```go
import (
	"github.com/go-fuego/fuego"
	"github.com/go-fuego/fuego/option"
	"github.com/go-fuego/fuego/param"
)

func main() {
	s := fuego.NewServer()

	// Custom OpenAPI options
	fuego.Post(s, "/", myController
		option.Description("This route does something..."),
		option.Summary("This is my summary"),
		option.Tags("MyTag"), // A tag is set by default according to the return type (can be deactivated)
		option.Deprecated(), // Marks the route as deprecated in the OpenAPI spec

		option.Query("name", "Declares a query parameter with default value", param.Default("Carmack")),
		option.Header("Authorization", "Bearer token", param.Required()),
		optionPagination,
		optionCustomBehavior,
	)

	s.Run()
}

var optionPagination = option.Group(
	option.QueryInt("page", "Page number", param.Default(1), param.Example("1st page", 1), param.Example("42nd page", 42)),
	option.QueryInt("perPage", "Number of items per page"),
)

var optionCustomBehavior = func(r *fuego.BaseRoute) {
	r.XXX = "YYY"
}
```

Then, in the controller

```go
type MyResponse struct {
	Answer string `json:"answer"`
}

func getAllPets(ctx fuego.ContextNoBody) (*MyResponse, error) {
	name := ctx.QueryParam("name")
	perPage, _ := ctx.QueryParamIntErr("per_page")

	return &MyResponse{Answer: "Hello " + name}, nil
}
```

 * OpenAPI spec version: 0.0.1
 */
import { httpClient } from './orvalCustomClient';
/**
 * CreateDosingParams schema
 */
export interface CreateDosingParams {
  ingredient_id?: string;
  quantity: number;
  recipe_id?: string;
  unit: string;
}

/**
 * CreateIngredientParams schema
 */
export interface CreateIngredientParams {
  available_all_year?: boolean;
  available_apr?: boolean;
  available_aug?: boolean;
  available_dec?: boolean;
  available_feb?: boolean;
  available_jan?: boolean;
  available_jul?: boolean;
  available_jun?: boolean;
  available_mar?: boolean;
  available_may?: boolean;
  available_nov?: boolean;
  available_oct?: boolean;
  available_sep?: boolean;
  category?: string;
  default_unit?: string;
  description?: string;
  id?: string;
  name?: string;
}

/**
 * CreateRecipeParams schema
 */
export interface CreateRecipeParams {
  category?: string;
  cook_time?: number;
  description?: string;
  id?: string;
  image_url?: string;
  instructions?: string;
  name?: string;
  prep_time?: number;
  published?: boolean;
  servings?: number;
  when_to_eat?: string;
}

/**
 * CreateUserPayload schema
 */
export interface CreateUserPayload {
  email: string;
  full_name: string;
  /** @minLength 8 */
  password: string;
  username: string;
}

export type GetFavoritesByUserRowRecipe = {
  calories?: number;
  category?: string;
  cook_time?: number;
  cost?: number;
  created_at?: string;
  created_by?: string;
  description?: string;
  disclaimer?: string;
  id?: string;
  image_url?: string;
  instructions?: string;
  name?: string;
  prep_time?: number;
  published?: boolean;
  servings?: number;
  when_to_eat?: string;
};

/**
 * GetFavoritesByUserRow schema
 */
export interface GetFavoritesByUserRow {
  recipe?: GetFavoritesByUserRowRecipe;
}

export type HTTPErrorErrorsItemMore = {[key: string]: unknown};

export type HTTPErrorErrorsItem = {
  more?: HTTPErrorErrorsItemMore;
  name?: string;
  reason?: string;
};

/**
 * HTTPError schema
 */
export interface HTTPError {
  /**
   * Human readable error message
   * @nullable
   */
  detail?: string | null;
  /** @nullable */
  errors?: HTTPErrorErrorsItem[] | null;
  /** @nullable */
  instance?: string | null;
  /**
   * HTTP status code
   * @nullable
   */
  status?: number | null;
  /**
   * Short title of the error
   * @nullable
   */
  title?: string | null;
  /**
   * URL of the error type. Can be used to lookup the error in a documentation
   * @nullable
   */
  type?: string | null;
}

/**
 * Ingredient schema
 */
export interface Ingredient {
  available_all_year?: boolean;
  available_apr?: boolean;
  available_aug?: boolean;
  available_dec?: boolean;
  available_feb?: boolean;
  available_jan?: boolean;
  available_jul?: boolean;
  available_jun?: boolean;
  available_mar?: boolean;
  available_may?: boolean;
  available_nov?: boolean;
  available_oct?: boolean;
  available_sep?: boolean;
  category?: string;
  created_at?: string;
  default_unit?: string;
  description?: string;
  id?: string;
  name?: string;
}

/**
 * LoginPayload schema
 */
export interface LoginPayload {
  password: string;
  username: string;
}

/**
 * Recipe schema
 */
export interface Recipe {
  calories?: number;
  category?: string;
  cook_time?: number;
  cost?: number;
  created_at?: string;
  created_by?: string;
  description?: string;
  disclaimer?: string;
  id?: string;
  image_url?: string;
  instructions?: string;
  name?: string;
  prep_time?: number;
  published?: boolean;
  servings?: number;
  when_to_eat?: string;
}

/**
 * TokenResponse schema
 */
export interface TokenResponse {
  token?: string;
}

/**
 * UpdateRecipeParams schema
 */
export interface UpdateRecipeParams {
  category?: string;
  cook_time?: number;
  description?: unknown;
  id?: string;
  image_url?: string;
  instructions?: unknown;
  name?: string;
  prep_time?: number;
  published?: boolean;
  servings?: number;
  when_to_eat?: string;
}

/**
 * User schema
 */
export interface User {
  created_at?: string;
  email?: string;
  encrypted_password?: string;
  full_name?: string;
  username?: string;
}

/**
 * UserFavorite schema
 */
export interface UserFavorite {
  recipe_id?: string;
  username?: string;
}

/**
 * UsersRecipesFavorite schema
 */
export interface UsersRecipesFavorite {
  created_at?: string;
  recipe_id?: string;
  username?: string;
}

/**
 * unknown-interface schema
 */
export interface UnknownInterface {}

export type GETAdminParams = {
/**
 * Page number
 */
page?: number;
/**
 * Number of items per page
 */
perPage?: number;
};

export type GETAdminIngredientsParams = {
/**
 * Page number
 */
page?: number;
/**
 * Number of items per page
 */
perPage?: number;
/**
 * Name to perform LIKE search on
 */
name?: string;
};

export type GETAdminRecipesParams = {
/**
 * Page number
 */
page?: number;
/**
 * Number of items per page
 */
perPage?: number;
/**
 * Name to perform LIKE search on
 */
name?: string;
};

export type GETIngredientsPreselectUnitParams = {
/**
 * ID
 */
id?: string;
};

export type POSTLoginParams = {
/**
 * Redirect URL
 */
redirect?: string;
};

export type GETRecipesListParams = {
/**
 * Search query
 */
search?: string;
};

export type GETSearchParams = {
/**
 * Search query
 */
q: string;
};

export type DELETEUsersUsernameFavoritesParams = {
/**
 * Recipe ID
 */
recipeID: string;
};

export type POSTUsersUsernameFavoritesParams = {
/**
 * Recipe ID
 */
recipeID: string;
};

/**
 * #### Controller: 

`github.com/go-fuego/fuego/examples/full-app-gourmet/handler.Resource.pageAdmin`

#### Middlewares:

- `fuego.defaultLogger.middleware`
- `middleware.(*Compressor).Handler`
- `server.Resources.Setup.TokenToContext.func10`
- `handler.Resource.Routes.New.func1`

---


 * @summary page admin
 */
export type gETAdminResponse200 = {
  data: UnknownInterface
  status: 200
}

export type gETAdminResponse400 = {
  data: HTTPError
  status: 400
}
    
export type gETAdminResponseComposite = gETAdminResponse200 | gETAdminResponse400;
    
export type gETAdminResponse = gETAdminResponseComposite & {
  headers: Headers;
}

export const getGETAdminUrl = (params?: GETAdminParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `https://gourmet.cours.quimerch.com/admin?${stringifiedParams}` : `https://gourmet.cours.quimerch.com/admin`
}

export const gETAdmin = async (params?: GETAdminParams, options?: RequestInit): Promise<gETAdminResponse> => {
  
  return httpClient<gETAdminResponse>(getGETAdminUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



/**
 * #### Controller: 

`github.com/go-fuego/fuego/examples/full-app-gourmet/handler.Resource.adminAddDosing`

#### Middlewares:

- `fuego.defaultLogger.middleware`
- `middleware.(*Compressor).Handler`
- `server.Resources.Setup.TokenToContext.func10`
- `handler.Resource.Routes.New.func1`

---


 * @summary admin add dosing
 */
export type pOSTAdminDosingsNewResponse200 = {
  data: UnknownInterface
  status: 200
}

export type pOSTAdminDosingsNewResponse400 = {
  data: HTTPError
  status: 400
}
    
export type pOSTAdminDosingsNewResponseComposite = pOSTAdminDosingsNewResponse200 | pOSTAdminDosingsNewResponse400;
    
export type pOSTAdminDosingsNewResponse = pOSTAdminDosingsNewResponseComposite & {
  headers: Headers;
}

export const getPOSTAdminDosingsNewUrl = () => {


  

  return `https://gourmet.cours.quimerch.com/admin/dosings/new`
}

export const pOSTAdminDosingsNew = async (createDosingParams: CreateDosingParams, options?: RequestInit): Promise<pOSTAdminDosingsNewResponse> => {
  
  return httpClient<pOSTAdminDosingsNewResponse>(getPOSTAdminDosingsNewUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': '*/*', ...options?.headers },
    body: JSON.stringify(
      createDosingParams,)
  }
);}



/**
 * #### Controller: 

`github.com/go-fuego/fuego/examples/full-app-gourmet/handler.Resource.adminIngredients`

#### Middlewares:

- `fuego.defaultLogger.middleware`
- `middleware.(*Compressor).Handler`
- `server.Resources.Setup.TokenToContext.func10`
- `handler.Resource.Routes.New.func1`

---


 * @summary admin ingredients
 */
export type gETAdminIngredientsResponse200 = {
  data: UnknownInterface
  status: 200
}

export type gETAdminIngredientsResponse400 = {
  data: HTTPError
  status: 400
}
    
export type gETAdminIngredientsResponseComposite = gETAdminIngredientsResponse200 | gETAdminIngredientsResponse400;
    
export type gETAdminIngredientsResponse = gETAdminIngredientsResponseComposite & {
  headers: Headers;
}

export const getGETAdminIngredientsUrl = (params?: GETAdminIngredientsParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `https://gourmet.cours.quimerch.com/admin/ingredients?${stringifiedParams}` : `https://gourmet.cours.quimerch.com/admin/ingredients`
}

export const gETAdminIngredients = async (params?: GETAdminIngredientsParams, options?: RequestInit): Promise<gETAdminIngredientsResponse> => {
  
  return httpClient<gETAdminIngredientsResponse>(getGETAdminIngredientsUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



/**
 * #### Controller: 

`github.com/go-fuego/fuego/examples/full-app-gourmet/handler.Resource.adminIngredientCreationPage`

#### Middlewares:

- `fuego.defaultLogger.middleware`
- `middleware.(*Compressor).Handler`
- `server.Resources.Setup.TokenToContext.func10`
- `handler.Resource.Routes.New.func1`

---


 * @summary admin ingredient creation page
 */
export type gETAdminIngredientsCreateResponse200 = {
  data: UnknownInterface
  status: 200
}

export type gETAdminIngredientsCreateResponse400 = {
  data: HTTPError
  status: 400
}
    
export type gETAdminIngredientsCreateResponseComposite = gETAdminIngredientsCreateResponse200 | gETAdminIngredientsCreateResponse400;
    
export type gETAdminIngredientsCreateResponse = gETAdminIngredientsCreateResponseComposite & {
  headers: Headers;
}

export const getGETAdminIngredientsCreateUrl = () => {


  

  return `https://gourmet.cours.quimerch.com/admin/ingredients/create`
}

export const gETAdminIngredientsCreate = async (createIngredientParams: CreateIngredientParams, options?: RequestInit): Promise<gETAdminIngredientsCreateResponse> => {
  
  return httpClient<gETAdminIngredientsCreateResponse>(getGETAdminIngredientsCreateUrl(),
  {      
    ...options,
    method: 'GET',
    headers: { 'Content-Type': '*/*', ...options?.headers },
    body: JSON.stringify(
      createIngredientParams,)
  }
);}



/**
 * #### Controller: 

`github.com/go-fuego/fuego/examples/full-app-gourmet/handler.Resource.adminCreateIngredient`

#### Middlewares:

- `fuego.defaultLogger.middleware`
- `middleware.(*Compressor).Handler`
- `server.Resources.Setup.TokenToContext.func10`
- `handler.Resource.Routes.New.func1`

---

Create a new ingredient
 * @summary admin create ingredient
 */
export type pOSTAdminIngredientsNewResponse200 = {
  data: UnknownInterface
  status: 200
}

export type pOSTAdminIngredientsNewResponse400 = {
  data: HTTPError
  status: 400
}
    
export type pOSTAdminIngredientsNewResponseComposite = pOSTAdminIngredientsNewResponse200 | pOSTAdminIngredientsNewResponse400;
    
export type pOSTAdminIngredientsNewResponse = pOSTAdminIngredientsNewResponseComposite & {
  headers: Headers;
}

export const getPOSTAdminIngredientsNewUrl = () => {


  

  return `https://gourmet.cours.quimerch.com/admin/ingredients/new`
}

export const pOSTAdminIngredientsNew = async (createIngredientParams: CreateIngredientParams, options?: RequestInit): Promise<pOSTAdminIngredientsNewResponse> => {
  
  return httpClient<pOSTAdminIngredientsNewResponse>(getPOSTAdminIngredientsNewUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': '*/*', ...options?.headers },
    body: JSON.stringify(
      createIngredientParams,)
  }
);}



/**
 * #### Controller: 

`github.com/go-fuego/fuego/examples/full-app-gourmet/handler.Resource.adminRecipes`

#### Middlewares:

- `fuego.defaultLogger.middleware`
- `middleware.(*Compressor).Handler`
- `server.Resources.Setup.TokenToContext.func10`
- `handler.Resource.Routes.New.func1`

---


 * @summary admin recipes
 */
export type gETAdminRecipesResponse200 = {
  data: UnknownInterface
  status: 200
}

export type gETAdminRecipesResponse400 = {
  data: HTTPError
  status: 400
}
    
export type gETAdminRecipesResponseComposite = gETAdminRecipesResponse200 | gETAdminRecipesResponse400;
    
export type gETAdminRecipesResponse = gETAdminRecipesResponseComposite & {
  headers: Headers;
}

export const getGETAdminRecipesUrl = (params?: GETAdminRecipesParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `https://gourmet.cours.quimerch.com/admin/recipes?${stringifiedParams}` : `https://gourmet.cours.quimerch.com/admin/recipes`
}

export const gETAdminRecipes = async (params?: GETAdminRecipesParams, options?: RequestInit): Promise<gETAdminRecipesResponse> => {
  
  return httpClient<gETAdminRecipesResponse>(getGETAdminRecipesUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



/**
 * #### Controller: 

`github.com/go-fuego/fuego/examples/full-app-gourmet/handler.Resource.addRecipe`

#### Middlewares:

- `fuego.defaultLogger.middleware`
- `middleware.(*Compressor).Handler`
- `server.Resources.Setup.TokenToContext.func10`
- `handler.Resource.Routes.New.func1`

---


 * @summary add recipe
 */
export type pOSTAdminRecipesResponse200 = {
  data: UnknownInterface
  status: 200
}

export type pOSTAdminRecipesResponse400 = {
  data: HTTPError
  status: 400
}
    
export type pOSTAdminRecipesResponseComposite = pOSTAdminRecipesResponse200 | pOSTAdminRecipesResponse400;
    
export type pOSTAdminRecipesResponse = pOSTAdminRecipesResponseComposite & {
  headers: Headers;
}

export const getPOSTAdminRecipesUrl = () => {


  

  return `https://gourmet.cours.quimerch.com/admin/recipes`
}

export const pOSTAdminRecipes = async (createRecipeParams: CreateRecipeParams, options?: RequestInit): Promise<pOSTAdminRecipesResponse> => {
  
  return httpClient<pOSTAdminRecipesResponse>(getPOSTAdminRecipesUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': '*/*', ...options?.headers },
    body: JSON.stringify(
      createRecipeParams,)
  }
);}



/**
 * #### Controller: 

`github.com/go-fuego/fuego/examples/full-app-gourmet/handler.Resource.adminCreateRecipePage`

#### Middlewares:

- `fuego.defaultLogger.middleware`
- `middleware.(*Compressor).Handler`
- `server.Resources.Setup.TokenToContext.func10`
- `handler.Resource.Routes.New.func1`

---


 * @summary admin create recipe page
 */
export type gETAdminRecipesCreateResponse200 = {
  data: UnknownInterface
  status: 200
}

export type gETAdminRecipesCreateResponse400 = {
  data: HTTPError
  status: 400
}
    
export type gETAdminRecipesCreateResponseComposite = gETAdminRecipesCreateResponse200 | gETAdminRecipesCreateResponse400;
    
export type gETAdminRecipesCreateResponse = gETAdminRecipesCreateResponseComposite & {
  headers: Headers;
}

export const getGETAdminRecipesCreateUrl = () => {


  

  return `https://gourmet.cours.quimerch.com/admin/recipes/create`
}

export const gETAdminRecipesCreate = async ( options?: RequestInit): Promise<gETAdminRecipesCreateResponse> => {
  
  return httpClient<gETAdminRecipesCreateResponse>(getGETAdminRecipesCreateUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



/**
 * #### Controller: 

`github.com/go-fuego/fuego/examples/full-app-gourmet/handler.Resource.editRecipe`

#### Middlewares:

- `fuego.defaultLogger.middleware`
- `middleware.(*Compressor).Handler`
- `server.Resources.Setup.TokenToContext.func10`
- `handler.Resource.Routes.New.func1`

---


 * @summary edit recipe
 */
export type pUTAdminRecipesEditResponse200 = {
  data: UnknownInterface
  status: 200
}

export type pUTAdminRecipesEditResponse400 = {
  data: HTTPError
  status: 400
}
    
export type pUTAdminRecipesEditResponseComposite = pUTAdminRecipesEditResponse200 | pUTAdminRecipesEditResponse400;
    
export type pUTAdminRecipesEditResponse = pUTAdminRecipesEditResponseComposite & {
  headers: Headers;
}

export const getPUTAdminRecipesEditUrl = () => {


  

  return `https://gourmet.cours.quimerch.com/admin/recipes/edit`
}

export const pUTAdminRecipesEdit = async (updateRecipeParams: UpdateRecipeParams, options?: RequestInit): Promise<pUTAdminRecipesEditResponse> => {
  
  return httpClient<pUTAdminRecipesEditResponse>(getPUTAdminRecipesEditUrl(),
  {      
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': '*/*', ...options?.headers },
    body: JSON.stringify(
      updateRecipeParams,)
  }
);}



/**
 * #### Controller: 

`github.com/go-fuego/fuego/examples/full-app-gourmet/handler.Resource.adminAddRecipes`

#### Middlewares:

- `fuego.defaultLogger.middleware`
- `middleware.(*Compressor).Handler`
- `server.Resources.Setup.TokenToContext.func10`
- `handler.Resource.Routes.New.func1`

---


 * @summary admin add recipes
 */
export type pOSTAdminRecipesNewResponse200 = {
  data: UnknownInterface
  status: 200
}

export type pOSTAdminRecipesNewResponse400 = {
  data: HTTPError
  status: 400
}
    
export type pOSTAdminRecipesNewResponseComposite = pOSTAdminRecipesNewResponse200 | pOSTAdminRecipesNewResponse400;
    
export type pOSTAdminRecipesNewResponse = pOSTAdminRecipesNewResponseComposite & {
  headers: Headers;
}

export const getPOSTAdminRecipesNewUrl = () => {


  

  return `https://gourmet.cours.quimerch.com/admin/recipes/new`
}

export const pOSTAdminRecipesNew = async (createRecipeParams: CreateRecipeParams, options?: RequestInit): Promise<pOSTAdminRecipesNewResponse> => {
  
  return httpClient<pOSTAdminRecipesNewResponse>(getPOSTAdminRecipesNewUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': '*/*', ...options?.headers },
    body: JSON.stringify(
      createRecipeParams,)
  }
);}



/**
 * #### Controller: 

`github.com/go-fuego/fuego/examples/full-app-gourmet/handler.Resource.adminDeleteRecipe`

#### Middlewares:

- `fuego.defaultLogger.middleware`
- `middleware.(*Compressor).Handler`
- `server.Resources.Setup.TokenToContext.func10`
- `handler.Resource.Routes.New.func1`

---


 * @summary admin delete recipe
 */
export type dELETEAdminRecipesIdResponse200 = {
  data: UnknownInterface
  status: 200
}

export type dELETEAdminRecipesIdResponse400 = {
  data: HTTPError
  status: 400
}
    
export type dELETEAdminRecipesIdResponseComposite = dELETEAdminRecipesIdResponse200 | dELETEAdminRecipesIdResponse400;
    
export type dELETEAdminRecipesIdResponse = dELETEAdminRecipesIdResponseComposite & {
  headers: Headers;
}

export const getDELETEAdminRecipesIdUrl = (id: string,) => {


  

  return `https://gourmet.cours.quimerch.com/admin/recipes/${id}`
}

export const dELETEAdminRecipesId = async (id: string, options?: RequestInit): Promise<dELETEAdminRecipesIdResponse> => {
  
  return httpClient<dELETEAdminRecipesIdResponse>(getDELETEAdminRecipesIdUrl(id),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
);}



/**
 * #### Controller: 

`github.com/go-fuego/fuego/examples/full-app-gourmet/handler.Resource.adminOneRecipe`

#### Middlewares:

- `fuego.defaultLogger.middleware`
- `middleware.(*Compressor).Handler`
- `server.Resources.Setup.TokenToContext.func10`
- `handler.Resource.Routes.New.func1`

---


 * @summary admin one recipe
 */
export type gETAdminRecipesIdResponse200 = {
  data: UnknownInterface
  status: 200
}

export type gETAdminRecipesIdResponse400 = {
  data: HTTPError
  status: 400
}
    
export type gETAdminRecipesIdResponseComposite = gETAdminRecipesIdResponse200 | gETAdminRecipesIdResponse400;
    
export type gETAdminRecipesIdResponse = gETAdminRecipesIdResponseComposite & {
  headers: Headers;
}

export const getGETAdminRecipesIdUrl = (id: string,) => {


  

  return `https://gourmet.cours.quimerch.com/admin/recipes/${id}`
}

export const gETAdminRecipesId = async (id: string,
    updateRecipeParams: UpdateRecipeParams, options?: RequestInit): Promise<gETAdminRecipesIdResponse> => {
  
  return httpClient<gETAdminRecipesIdResponse>(getGETAdminRecipesIdUrl(id),
  {      
    ...options,
    method: 'GET',
    headers: { 'Content-Type': '*/*', ...options?.headers },
    body: JSON.stringify(
      updateRecipeParams,)
  }
);}



/**
 * #### Controller: 

`github.com/go-fuego/fuego/examples/full-app-gourmet/handler.Resource.adminOneRecipe`

#### Middlewares:

- `fuego.defaultLogger.middleware`
- `middleware.(*Compressor).Handler`
- `server.Resources.Setup.TokenToContext.func10`
- `handler.Resource.Routes.New.func1`

---


 * @summary admin one recipe
 */
export type pUTAdminRecipesIdResponse200 = {
  data: UnknownInterface
  status: 200
}

export type pUTAdminRecipesIdResponse400 = {
  data: HTTPError
  status: 400
}
    
export type pUTAdminRecipesIdResponseComposite = pUTAdminRecipesIdResponse200 | pUTAdminRecipesIdResponse400;
    
export type pUTAdminRecipesIdResponse = pUTAdminRecipesIdResponseComposite & {
  headers: Headers;
}

export const getPUTAdminRecipesIdUrl = (id: string,) => {


  

  return `https://gourmet.cours.quimerch.com/admin/recipes/${id}`
}

export const pUTAdminRecipesId = async (id: string,
    updateRecipeParams: UpdateRecipeParams, options?: RequestInit): Promise<pUTAdminRecipesIdResponse> => {
  
  return httpClient<pUTAdminRecipesIdResponse>(getPUTAdminRecipesIdUrl(id),
  {      
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': '*/*', ...options?.headers },
    body: JSON.stringify(
      updateRecipeParams,)
  }
);}



/**
 * #### Controller: 

`github.com/go-fuego/fuego/examples/full-app-gourmet/handler.Resource.getUsers`

#### Middlewares:

- `fuego.defaultLogger.middleware`
- `middleware.(*Compressor).Handler`
- `server.Resources.Setup.TokenToContext.func10`
- `handler.Resource.Routes.New.func1`

---


 * @summary get users
 */
export type gETAdminUsersResponse200 = {
  data: User[]
  status: 200
}

export type gETAdminUsersResponse400 = {
  data: HTTPError
  status: 400
}
    
export type gETAdminUsersResponseComposite = gETAdminUsersResponse200 | gETAdminUsersResponse400;
    
export type gETAdminUsersResponse = gETAdminUsersResponseComposite & {
  headers: Headers;
}

export const getGETAdminUsersUrl = () => {


  

  return `https://gourmet.cours.quimerch.com/admin/users`
}

export const gETAdminUsers = async ( options?: RequestInit): Promise<gETAdminUsersResponse> => {
  
  return httpClient<gETAdminUsersResponse>(getGETAdminUsersUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



/**
 * #### Controller: 

`github.com/go-fuego/fuego/examples/full-app-gourmet/handler.Resource.createUser`

#### Middlewares:

- `fuego.defaultLogger.middleware`
- `middleware.(*Compressor).Handler`
- `server.Resources.Setup.TokenToContext.func10`
- `handler.Resource.Routes.New.func1`

---


 * @summary create user
 */
export type pOSTAdminUsersResponse200 = {
  data: User
  status: 200
}

export type pOSTAdminUsersResponse400 = {
  data: HTTPError
  status: 400
}
    
export type pOSTAdminUsersResponseComposite = pOSTAdminUsersResponse200 | pOSTAdminUsersResponse400;
    
export type pOSTAdminUsersResponse = pOSTAdminUsersResponseComposite & {
  headers: Headers;
}

export const getPOSTAdminUsersUrl = () => {


  

  return `https://gourmet.cours.quimerch.com/admin/users`
}

export const pOSTAdminUsers = async (createUserPayload: CreateUserPayload, options?: RequestInit): Promise<pOSTAdminUsersResponse> => {
  
  return httpClient<pOSTAdminUsersResponse>(getPOSTAdminUsersUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': '*/*', ...options?.headers },
    body: JSON.stringify(
      createUserPayload,)
  }
);}



/**
 * #### Controller: 

`github.com/go-fuego/fuego/examples/full-app-gourmet/handler.Resource.connection`

#### Middlewares:

- `fuego.defaultLogger.middleware`
- `middleware.(*Compressor).Handler`
- `server.Resources.Setup.TokenToContext.func10`

---


 * @summary connection
 */
export type gETConnectionResponse200 = {
  data: UnknownInterface
  status: 200
}

export type gETConnectionResponse400 = {
  data: HTTPError
  status: 400
}
    
export type gETConnectionResponseComposite = gETConnectionResponse200 | gETConnectionResponse400;
    
export type gETConnectionResponse = gETConnectionResponseComposite & {
  headers: Headers;
}

export const getGETConnectionUrl = () => {


  

  return `https://gourmet.cours.quimerch.com/connection`
}

export const gETConnection = async ( options?: RequestInit): Promise<gETConnectionResponse> => {
  
  return httpClient<gETConnectionResponse>(getGETConnectionUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



/**
 * #### Controller: 

`github.com/go-fuego/fuego/examples/full-app-gourmet/handler.Resource.fastRecipes`

#### Middlewares:

- `fuego.defaultLogger.middleware`
- `middleware.(*Compressor).Handler`
- `server.Resources.Setup.TokenToContext.func10`

---


 * @summary fast recipes
 */
export type gETFastResponse200 = {
  data: UnknownInterface
  status: 200
}

export type gETFastResponse400 = {
  data: HTTPError
  status: 400
}
    
export type gETFastResponseComposite = gETFastResponse200 | gETFastResponse400;
    
export type gETFastResponse = gETFastResponseComposite & {
  headers: Headers;
}

export const getGETFastUrl = () => {


  

  return `https://gourmet.cours.quimerch.com/fast`
}

export const gETFast = async ( options?: RequestInit): Promise<gETFastResponse> => {
  
  return httpClient<gETFastResponse>(getGETFastUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



/**
 * #### Controller: 

`github.com/go-fuego/fuego/examples/full-app-gourmet/handler.Resource.getMyFavorites`

#### Middlewares:

- `fuego.defaultLogger.middleware`
- `middleware.(*Compressor).Handler`
- `server.Resources.Setup.TokenToContext.func10`

---


 * @summary get my favorites
 */
export type gETFavoritesResponse200 = {
  data: GetFavoritesByUserRow[]
  status: 200
}

export type gETFavoritesResponse400 = {
  data: HTTPError
  status: 400
}
    
export type gETFavoritesResponseComposite = gETFavoritesResponse200 | gETFavoritesResponse400;
    
export type gETFavoritesResponse = gETFavoritesResponseComposite & {
  headers: Headers;
}

export const getGETFavoritesUrl = () => {


  

  return `https://gourmet.cours.quimerch.com/favorites`
}

export const gETFavorites = async ( options?: RequestInit): Promise<gETFavoritesResponse> => {
  
  return httpClient<gETFavoritesResponse>(getGETFavoritesUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



/**
 * #### Controller: 

`github.com/go-fuego/fuego/examples/full-app-gourmet/handler.Resource.healthyRecipes`

#### Middlewares:

- `fuego.defaultLogger.middleware`
- `middleware.(*Compressor).Handler`
- `server.Resources.Setup.TokenToContext.func10`

---


 * @summary healthy recipes
 */
export type gETHealthyResponse200 = {
  data: UnknownInterface
  status: 200
}

export type gETHealthyResponse400 = {
  data: HTTPError
  status: 400
}
    
export type gETHealthyResponseComposite = gETHealthyResponse200 | gETHealthyResponse400;
    
export type gETHealthyResponse = gETHealthyResponseComposite & {
  headers: Headers;
}

export const getGETHealthyUrl = () => {


  

  return `https://gourmet.cours.quimerch.com/healthy`
}

export const gETHealthy = async ( options?: RequestInit): Promise<gETHealthyResponse> => {
  
  return httpClient<gETHealthyResponse>(getGETHealthyUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



/**
 * #### Controller: 

`github.com/go-fuego/fuego/examples/full-app-gourmet/handler.Resource.showIngredients`

#### Middlewares:

- `fuego.defaultLogger.middleware`
- `middleware.(*Compressor).Handler`
- `server.Resources.Setup.TokenToContext.func10`

---


 * @summary show ingredients
 */
export type gETIngredientsResponse200 = {
  data: Ingredient[]
  status: 200
}

export type gETIngredientsResponse400 = {
  data: HTTPError
  status: 400
}
    
export type gETIngredientsResponseComposite = gETIngredientsResponse200 | gETIngredientsResponse400;
    
export type gETIngredientsResponse = gETIngredientsResponseComposite & {
  headers: Headers;
}

export const getGETIngredientsUrl = () => {


  

  return `https://gourmet.cours.quimerch.com/ingredients`
}

export const gETIngredients = async ( options?: RequestInit): Promise<gETIngredientsResponse> => {
  
  return httpClient<gETIngredientsResponse>(getGETIngredientsUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



/**
 * #### Controller: 

`github.com/go-fuego/fuego/examples/full-app-gourmet/handler.Resource.unitPreselected`

#### Middlewares:

- `fuego.defaultLogger.middleware`
- `middleware.(*Compressor).Handler`
- `server.Resources.Setup.TokenToContext.func10`

---


 * @summary unit preselected
 */
export type gETIngredientsPreselectUnitResponse200 = {
  data: UnknownInterface
  status: 200
}

export type gETIngredientsPreselectUnitResponse400 = {
  data: HTTPError
  status: 400
}
    
export type gETIngredientsPreselectUnitResponseComposite = gETIngredientsPreselectUnitResponse200 | gETIngredientsPreselectUnitResponse400;
    
export type gETIngredientsPreselectUnitResponse = gETIngredientsPreselectUnitResponseComposite & {
  headers: Headers;
}

export const getGETIngredientsPreselectUnitUrl = (params: GETIngredientsPreselectUnitParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `https://gourmet.cours.quimerch.com/ingredients/preselect-unit?${stringifiedParams}` : `https://gourmet.cours.quimerch.com/ingredients/preselect-unit`
}

export const gETIngredientsPreselectUnit = async (params: GETIngredientsPreselectUnitParams, options?: RequestInit): Promise<gETIngredientsPreselectUnitResponse> => {
  
  return httpClient<gETIngredientsPreselectUnitResponse>(getGETIngredientsPreselectUnitUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



/**
 * #### Controller: 

`github.com/go-fuego/fuego/examples/full-app-gourmet/handler.Resource.login`

#### Middlewares:

- `fuego.defaultLogger.middleware`
- `middleware.(*Compressor).Handler`
- `server.Resources.Setup.TokenToContext.func10`

---


 * @summary login
 */
export type pOSTLoginResponse200 = {
  data: TokenResponse
  status: 200
}

export type pOSTLoginResponse400 = {
  data: HTTPError
  status: 400
}
    
export type pOSTLoginResponseComposite = pOSTLoginResponse200 | pOSTLoginResponse400;
    
export type pOSTLoginResponse = pOSTLoginResponseComposite & {
  headers: Headers;
}

export const getPOSTLoginUrl = (params?: POSTLoginParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `https://gourmet.cours.quimerch.com/login?${stringifiedParams}` : `https://gourmet.cours.quimerch.com/login`
}

export const pOSTLogin = async (loginPayload: LoginPayload,
    params?: POSTLoginParams, options?: RequestInit): Promise<pOSTLoginResponse> => {
  
  return httpClient<pOSTLoginResponse>(getPOSTLoginUrl(params),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': '*/*', ...options?.headers },
    body: JSON.stringify(
      loginPayload,)
  }
);}



/**
 * #### Controller: 

`github.com/go-fuego/fuego/examples/full-app-gourmet/handler.Resource.logout`

#### Middlewares:

- `fuego.defaultLogger.middleware`
- `middleware.(*Compressor).Handler`
- `server.Resources.Setup.TokenToContext.func10`

---


 * @summary logout
 */
export type gETLogoutResponse200 = {
  data: UnknownInterface
  status: 200
}

export type gETLogoutResponse400 = {
  data: HTTPError
  status: 400
}
    
export type gETLogoutResponseComposite = gETLogoutResponse200 | gETLogoutResponse400;
    
export type gETLogoutResponse = gETLogoutResponseComposite & {
  headers: Headers;
}

export const getGETLogoutUrl = () => {


  

  return `https://gourmet.cours.quimerch.com/logout`
}

export const gETLogout = async ( options?: RequestInit): Promise<gETLogoutResponse> => {
  
  return httpClient<gETLogoutResponse>(getGETLogoutUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



/**
 * #### Controller: 

`github.com/go-fuego/fuego/examples/full-app-gourmet/handler.Resource.me`

#### Middlewares:

- `fuego.defaultLogger.middleware`
- `middleware.(*Compressor).Handler`
- `server.Resources.Setup.TokenToContext.func10`

---


 * @summary me
 */
export type gETMeResponse200 = {
  data: User
  status: 200
}

export type gETMeResponse400 = {
  data: HTTPError
  status: 400
}
    
export type gETMeResponseComposite = gETMeResponse200 | gETMeResponse400;
    
export type gETMeResponse = gETMeResponseComposite & {
  headers: Headers;
}

export const getGETMeUrl = () => {


  

  return `https://gourmet.cours.quimerch.com/me`
}

export const gETMe = async ( options?: RequestInit): Promise<gETMeResponse> => {
  
  return httpClient<gETMeResponse>(getGETMeUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



/**
 * #### Controller: 

`github.com/go-fuego/fuego/examples/full-app-gourmet/handler.Resource.planner`

#### Middlewares:

- `fuego.defaultLogger.middleware`
- `middleware.(*Compressor).Handler`
- `server.Resources.Setup.TokenToContext.func10`

---


 * @summary planner
 */
export type gETPlannerResponse200 = {
  data: UnknownInterface
  status: 200
}

export type gETPlannerResponse400 = {
  data: HTTPError
  status: 400
}
    
export type gETPlannerResponseComposite = gETPlannerResponse200 | gETPlannerResponse400;
    
export type gETPlannerResponse = gETPlannerResponseComposite & {
  headers: Headers;
}

export const getGETPlannerUrl = () => {


  

  return `https://gourmet.cours.quimerch.com/planner`
}

export const gETPlanner = async ( options?: RequestInit): Promise<gETPlannerResponse> => {
  
  return httpClient<gETPlannerResponse>(getGETPlannerUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



/**
 * #### Controller: 

`github.com/go-fuego/fuego/examples/full-app-gourmet/handler.Resource.listRecipes`

#### Middlewares:

- `fuego.defaultLogger.middleware`
- `middleware.(*Compressor).Handler`
- `server.Resources.Setup.TokenToContext.func10`

---


 * @summary list recipes
 */
export type gETRecipesResponse200 = {
  data: Recipe[]
  status: 200
}

export type gETRecipesResponse400 = {
  data: HTTPError
  status: 400
}
    
export type gETRecipesResponseComposite = gETRecipesResponse200 | gETRecipesResponse400;
    
export type gETRecipesResponse = gETRecipesResponseComposite & {
  headers: Headers;
}

export const getGETRecipesUrl = () => {


  

  return `https://gourmet.cours.quimerch.com/recipes`
}

export const gETRecipes = async ( options?: RequestInit): Promise<gETRecipesResponse> => {
  
  return httpClient<gETRecipesResponse>(getGETRecipesUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



/**
 * #### Controller: 

`github.com/go-fuego/fuego/examples/full-app-gourmet/handler.Resource.showRecipesList`

#### Middlewares:

- `fuego.defaultLogger.middleware`
- `middleware.(*Compressor).Handler`
- `server.Resources.Setup.TokenToContext.func10`

---

This is a demo route, it is not useful for the Gourmet app but showcases Fuego features.
 * @deprecated
 * @summary show recipes list
 */
export type gETRecipesListResponse200 = {
  data: UnknownInterface
  status: 200
}

export type gETRecipesListResponse400 = {
  data: HTTPError
  status: 400
}
    
export type gETRecipesListResponseComposite = gETRecipesListResponse200 | gETRecipesListResponse400;
    
export type gETRecipesListResponse = gETRecipesListResponseComposite & {
  headers: Headers;
}

export const getGETRecipesListUrl = (params?: GETRecipesListParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `https://gourmet.cours.quimerch.com/recipes-list?${stringifiedParams}` : `https://gourmet.cours.quimerch.com/recipes-list`
}

export const gETRecipesList = async (params?: GETRecipesListParams, options?: RequestInit): Promise<gETRecipesListResponse> => {
  
  return httpClient<gETRecipesListResponse>(getGETRecipesListUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



/**
 * #### Controller: 

`github.com/go-fuego/fuego/examples/full-app-gourmet/handler.Resource.showRecipesStd`

#### Middlewares:

- `fuego.defaultLogger.middleware`
- `middleware.(*Compressor).Handler`
- `server.Resources.Setup.TokenToContext.func10`

---

This is a demo route, it is not useful for the Gourmet app but showcases Fuego features.
 * @deprecated
 * @summary show recipes std
 */
export type gETRecipesStdResponse200 = {
  data: UnknownInterface
  status: 200
}

export type gETRecipesStdResponse400 = {
  data: HTTPError
  status: 400
}
    
export type gETRecipesStdResponseComposite = gETRecipesStdResponse200 | gETRecipesStdResponse400;
    
export type gETRecipesStdResponse = gETRecipesStdResponseComposite & {
  headers: Headers;
}

export const getGETRecipesStdUrl = () => {


  

  return `https://gourmet.cours.quimerch.com/recipes-std`
}

export const gETRecipesStd = async ( options?: RequestInit): Promise<gETRecipesStdResponse> => {
  
  return httpClient<gETRecipesStdResponse>(getGETRecipesStdUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



/**
 * #### Controller: 

`github.com/go-fuego/fuego/examples/full-app-gourmet/handler.Resource.getAllRecipesStandardWithHelpers`

#### Middlewares:

- `fuego.defaultLogger.middleware`
- `middleware.(*Compressor).Handler`
- `server.Resources.Setup.TokenToContext.func10`

---

This is a demo route, it is not useful for the Gourmet app but showcases Fuego features.
 * @deprecated
 * @summary get all recipes standard with helpers
 */
export type gETRecipesStdJsonResponse200 = {
  data: UnknownInterface
  status: 200
}

export type gETRecipesStdJsonResponse400 = {
  data: HTTPError
  status: 400
}
    
export type gETRecipesStdJsonResponseComposite = gETRecipesStdJsonResponse200 | gETRecipesStdJsonResponse400;
    
export type gETRecipesStdJsonResponse = gETRecipesStdJsonResponseComposite & {
  headers: Headers;
}

export const getGETRecipesStdJsonUrl = () => {


  

  return `https://gourmet.cours.quimerch.com/recipes-std-json`
}

export const gETRecipesStdJson = async ( options?: RequestInit): Promise<gETRecipesStdJsonResponse> => {
  
  return httpClient<gETRecipesStdJsonResponse>(getGETRecipesStdJsonUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



/**
 * #### Controller: 

`github.com/go-fuego/fuego/examples/full-app-gourmet/handler.Resource.singleRecipe`

#### Middlewares:

- `fuego.defaultLogger.middleware`
- `middleware.(*Compressor).Handler`
- `server.Resources.Setup.TokenToContext.func10`

---


 * @summary single recipe
 */
export type gETRecipesIdResponse200 = {
  data: Recipe
  status: 200
}

export type gETRecipesIdResponse400 = {
  data: HTTPError
  status: 400
}
    
export type gETRecipesIdResponseComposite = gETRecipesIdResponse200 | gETRecipesIdResponse400;
    
export type gETRecipesIdResponse = gETRecipesIdResponseComposite & {
  headers: Headers;
}

export const getGETRecipesIdUrl = (id: string,) => {


  

  return `https://gourmet.cours.quimerch.com/recipes/${id}`
}

export const gETRecipesId = async (id: string, options?: RequestInit): Promise<gETRecipesIdResponse> => {
  
  return httpClient<gETRecipesIdResponse>(getGETRecipesIdUrl(id),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



/**
 * #### Controller: 

`github.com/go-fuego/fuego/examples/full-app-gourmet/handler.Resource.relatedRecipes`

#### Middlewares:

- `fuego.defaultLogger.middleware`
- `middleware.(*Compressor).Handler`
- `server.Resources.Setup.TokenToContext.func10`

---


 * @summary related recipes
 */
export type gETRecipesIdRelatedResponse200 = {
  data: Recipe[]
  status: 200
}

export type gETRecipesIdRelatedResponse400 = {
  data: HTTPError
  status: 400
}
    
export type gETRecipesIdRelatedResponseComposite = gETRecipesIdRelatedResponse200 | gETRecipesIdRelatedResponse400;
    
export type gETRecipesIdRelatedResponse = gETRecipesIdRelatedResponseComposite & {
  headers: Headers;
}

export const getGETRecipesIdRelatedUrl = (id: string,) => {


  

  return `https://gourmet.cours.quimerch.com/recipes/${id}/related`
}

export const gETRecipesIdRelated = async (id: string, options?: RequestInit): Promise<gETRecipesIdRelatedResponse> => {
  
  return httpClient<gETRecipesIdRelatedResponse>(getGETRecipesIdRelatedUrl(id),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



/**
 * #### Controller: 

`github.com/go-fuego/fuego/examples/full-app-gourmet/handler.Resource.favoritesCount`

#### Middlewares:

- `fuego.defaultLogger.middleware`
- `middleware.(*Compressor).Handler`
- `server.Resources.Setup.TokenToContext.func10`

---

Get the realtime number of favorites for a recipe with Server-Sent Events
 * @summary favorites count
 */
export type gETRecipesIdStarsResponse200 = {
  data: UnknownInterface
  status: 200
}

export type gETRecipesIdStarsResponse400 = {
  data: HTTPError
  status: 400
}
    
export type gETRecipesIdStarsResponseComposite = gETRecipesIdStarsResponse200 | gETRecipesIdStarsResponse400;
    
export type gETRecipesIdStarsResponse = gETRecipesIdStarsResponseComposite & {
  headers: Headers;
}

export const getGETRecipesIdStarsUrl = (id: string,) => {


  

  return `https://gourmet.cours.quimerch.com/recipes/${id}/stars`
}

export const gETRecipesIdStars = async (id: string, options?: RequestInit): Promise<gETRecipesIdStarsResponse> => {
  
  return httpClient<gETRecipesIdStarsResponse>(getGETRecipesIdStarsUrl(id),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



/**
 * #### Controller: 

`github.com/go-fuego/fuego/examples/full-app-gourmet/handler.Resource.favoritesCountFake`

#### Middlewares:

- `fuego.defaultLogger.middleware`
- `middleware.(*Compressor).Handler`
- `server.Resources.Setup.TokenToContext.func10`

---

Fake route for testing the realtime number of favorites for a recipe with Server-Sent Events. It sends a random number every second.
 * @summary favorites count fake
 */
export type gETRecipesIdStarsFakeResponse200 = {
  data: UnknownInterface
  status: 200
}

export type gETRecipesIdStarsFakeResponse400 = {
  data: HTTPError
  status: 400
}
    
export type gETRecipesIdStarsFakeResponseComposite = gETRecipesIdStarsFakeResponse200 | gETRecipesIdStarsFakeResponse400;
    
export type gETRecipesIdStarsFakeResponse = gETRecipesIdStarsFakeResponseComposite & {
  headers: Headers;
}

export const getGETRecipesIdStarsFakeUrl = (id: string,) => {


  

  return `https://gourmet.cours.quimerch.com/recipes/${id}/stars/fake`
}

export const gETRecipesIdStarsFake = async (id: string, options?: RequestInit): Promise<gETRecipesIdStarsFakeResponse> => {
  
  return httpClient<gETRecipesIdStarsFakeResponse>(getGETRecipesIdStarsFakeUrl(id),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



/**
 * #### Controller: 

`github.com/go-fuego/fuego/examples/full-app-gourmet/handler.Resource.robots`

#### Middlewares:

- `fuego.defaultLogger.middleware`
- `middleware.(*Compressor).Handler`
- `server.Resources.Setup.TokenToContext.func10`
- `cache.New.func2`

---


 * @summary robots
 */
export type gETRobotsTxtResponse200 = {
  data: UnknownInterface
  status: 200
}

export type gETRobotsTxtResponse400 = {
  data: HTTPError
  status: 400
}
    
export type gETRobotsTxtResponseComposite = gETRobotsTxtResponse200 | gETRobotsTxtResponse400;
    
export type gETRobotsTxtResponse = gETRobotsTxtResponseComposite & {
  headers: Headers;
}

export const getGETRobotsTxtUrl = () => {


  

  return `https://gourmet.cours.quimerch.com/robots.txt`
}

export const gETRobotsTxt = async ( options?: RequestInit): Promise<gETRobotsTxtResponse> => {
  
  return httpClient<gETRobotsTxtResponse>(getGETRobotsTxtUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



/**
 * #### Controller: 

`github.com/go-fuego/fuego/examples/full-app-gourmet/handler.Resource.searchRecipes`

#### Middlewares:

- `fuego.defaultLogger.middleware`
- `middleware.(*Compressor).Handler`
- `server.Resources.Setup.TokenToContext.func10`

---


 * @summary search recipes
 */
export type gETSearchResponse200 = {
  data: UnknownInterface
  status: 200
}

export type gETSearchResponse400 = {
  data: HTTPError
  status: 400
}
    
export type gETSearchResponseComposite = gETSearchResponse200 | gETSearchResponse400;
    
export type gETSearchResponse = gETSearchResponseComposite & {
  headers: Headers;
}

export const getGETSearchUrl = (params: GETSearchParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `https://gourmet.cours.quimerch.com/search?${stringifiedParams}` : `https://gourmet.cours.quimerch.com/search`
}

export const gETSearch = async (params: GETSearchParams, options?: RequestInit): Promise<gETSearchResponse> => {
  
  return httpClient<gETSearchResponse>(getGETSearchUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



/**
 * #### Controller: 

`github.com/go-fuego/fuego/examples/full-app-gourmet/handler.Resource.getUserByUsername`

#### Middlewares:

- `fuego.defaultLogger.middleware`
- `middleware.(*Compressor).Handler`
- `server.Resources.Setup.TokenToContext.func10`

---


 * @summary get user by username
 */
export type gETUsersUsernameResponse200 = {
  data: User
  status: 200
}

export type gETUsersUsernameResponse400 = {
  data: HTTPError
  status: 400
}
    
export type gETUsersUsernameResponseComposite = gETUsersUsernameResponse200 | gETUsersUsernameResponse400;
    
export type gETUsersUsernameResponse = gETUsersUsernameResponseComposite & {
  headers: Headers;
}

export const getGETUsersUsernameUrl = (username: string,) => {


  

  return `https://gourmet.cours.quimerch.com/users/${username}`
}

export const gETUsersUsername = async (username: string, options?: RequestInit): Promise<gETUsersUsernameResponse> => {
  
  return httpClient<gETUsersUsernameResponse>(getGETUsersUsernameUrl(username),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



/**
 * #### Controller: 

`github.com/go-fuego/fuego/examples/full-app-gourmet/handler.Resource.removeFavorite`

#### Middlewares:

- `fuego.defaultLogger.middleware`
- `middleware.(*Compressor).Handler`
- `server.Resources.Setup.TokenToContext.func10`

---


 * @summary remove favorite
 */
export type dELETEUsersUsernameFavoritesResponse200 = {
  data: UnknownInterface
  status: 200
}

export type dELETEUsersUsernameFavoritesResponse400 = {
  data: HTTPError
  status: 400
}
    
export type dELETEUsersUsernameFavoritesResponseComposite = dELETEUsersUsernameFavoritesResponse200 | dELETEUsersUsernameFavoritesResponse400;
    
export type dELETEUsersUsernameFavoritesResponse = dELETEUsersUsernameFavoritesResponseComposite & {
  headers: Headers;
}

export const getDELETEUsersUsernameFavoritesUrl = (username: string,
    params: DELETEUsersUsernameFavoritesParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `https://gourmet.cours.quimerch.com/users/${username}/favorites?${stringifiedParams}` : `https://gourmet.cours.quimerch.com/users/${username}/favorites`
}

export const dELETEUsersUsernameFavorites = async (username: string,
    params: DELETEUsersUsernameFavoritesParams, options?: RequestInit): Promise<dELETEUsersUsernameFavoritesResponse> => {
  
  return httpClient<dELETEUsersUsernameFavoritesResponse>(getDELETEUsersUsernameFavoritesUrl(username,params),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
);}



/**
 * #### Controller: 

`github.com/go-fuego/fuego/examples/full-app-gourmet/handler.Resource.getFavoritesByUser`

#### Middlewares:

- `fuego.defaultLogger.middleware`
- `middleware.(*Compressor).Handler`
- `server.Resources.Setup.TokenToContext.func10`

---


 * @summary get favorites by user
 */
export type gETUsersUsernameFavoritesResponse200 = {
  data: GetFavoritesByUserRow[]
  status: 200
}

export type gETUsersUsernameFavoritesResponse400 = {
  data: HTTPError
  status: 400
}
    
export type gETUsersUsernameFavoritesResponseComposite = gETUsersUsernameFavoritesResponse200 | gETUsersUsernameFavoritesResponse400;
    
export type gETUsersUsernameFavoritesResponse = gETUsersUsernameFavoritesResponseComposite & {
  headers: Headers;
}

export const getGETUsersUsernameFavoritesUrl = (username: string,) => {


  

  return `https://gourmet.cours.quimerch.com/users/${username}/favorites`
}

export const gETUsersUsernameFavorites = async (username: string, options?: RequestInit): Promise<gETUsersUsernameFavoritesResponse> => {
  
  return httpClient<gETUsersUsernameFavoritesResponse>(getGETUsersUsernameFavoritesUrl(username),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



/**
 * #### Controller: 

`github.com/go-fuego/fuego/examples/full-app-gourmet/handler.Resource.addFavorite`

#### Middlewares:

- `fuego.defaultLogger.middleware`
- `middleware.(*Compressor).Handler`
- `server.Resources.Setup.TokenToContext.func10`

---


 * @summary add favorite
 */
export type pOSTUsersUsernameFavoritesResponse200 = {
  data: UsersRecipesFavorite
  status: 200
}

export type pOSTUsersUsernameFavoritesResponse400 = {
  data: HTTPError
  status: 400
}
    
export type pOSTUsersUsernameFavoritesResponseComposite = pOSTUsersUsernameFavoritesResponse200 | pOSTUsersUsernameFavoritesResponse400;
    
export type pOSTUsersUsernameFavoritesResponse = pOSTUsersUsernameFavoritesResponseComposite & {
  headers: Headers;
}

export const getPOSTUsersUsernameFavoritesUrl = (username: string,
    params: POSTUsersUsernameFavoritesParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `https://gourmet.cours.quimerch.com/users/${username}/favorites?${stringifiedParams}` : `https://gourmet.cours.quimerch.com/users/${username}/favorites`
}

export const pOSTUsersUsernameFavorites = async (username: string,
    params: POSTUsersUsernameFavoritesParams, options?: RequestInit): Promise<pOSTUsersUsernameFavoritesResponse> => {
  
  return httpClient<pOSTUsersUsernameFavoritesResponse>(getPOSTUsersUsernameFavoritesUrl(username,params),
  {      
    ...options,
    method: 'POST'
    
    
  }
);}



/**
 * #### Controller: 

`github.com/go-fuego/fuego/examples/full-app-gourmet/handler.Resource.getFavoritesByUserUnsecureSql`

#### Middlewares:

- `fuego.defaultLogger.middleware`
- `middleware.(*Compressor).Handler`
- `server.Resources.Setup.TokenToContext.func10`

---


 * @summary get favorites by user unsecure sql
 */
export type gETUsersUsernameFavoritesSqlinjectionResponse200 = {
  data: UserFavorite[]
  status: 200
}

export type gETUsersUsernameFavoritesSqlinjectionResponse400 = {
  data: HTTPError
  status: 400
}
    
export type gETUsersUsernameFavoritesSqlinjectionResponseComposite = gETUsersUsernameFavoritesSqlinjectionResponse200 | gETUsersUsernameFavoritesSqlinjectionResponse400;
    
export type gETUsersUsernameFavoritesSqlinjectionResponse = gETUsersUsernameFavoritesSqlinjectionResponseComposite & {
  headers: Headers;
}

export const getGETUsersUsernameFavoritesSqlinjectionUrl = (username: string,) => {


  

  return `https://gourmet.cours.quimerch.com/users/${username}/favorites/sqlinjection`
}

export const gETUsersUsernameFavoritesSqlinjection = async (username: string, options?: RequestInit): Promise<gETUsersUsernameFavoritesSqlinjectionResponse> => {
  
  return httpClient<gETUsersUsernameFavoritesSqlinjectionResponse>(getGETUsersUsernameFavoritesSqlinjectionUrl(username),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}
